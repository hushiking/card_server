/**
 *
 * @author     richen
 * @copyright  Copyright (c) 2016 - <richenlin(at)gmail.com>
 * @license    MIT
 * @version    17/7/27
 */
const mysql = require('mysql');
const lib = require('think_lib');
const awaitjs = require('./await.js');

module.exports = class {
    constructor(config = {}) {
        this.config = {
            database: config.db_name,
            host: config.db_host || '127.0.0.1',
            user: config.db_user || 'root',
            password: config.db_pwd || '',
            port: config.db_port || 3306,
            encoding: config.db_charset || 'utf8',
            connectTimeout: config.db_timeout * 1000 || 10000, //try connection timeout
            connectionLimit: config.db_ext_config.db_pool_size || 10,
            db_ext_config: config.db_ext_config || {}
        };
        //node-mysql2 not support utf8 or utf-8
        let charset = (this.config.encoding || '').toLowerCase();
        if (charset === 'utf8' || charset === 'utf-8') {
            this.config.charset = 'UTF8_GENERAL_CI';
        }
        this.pool = null;
        this.connection = null;
    }
    /**
     * 
     * 
     * @param {number} [connnum=0] 
     * @returns 
     */
    connect(connnum = 0) {
        if (this.connection) {
            return Promise.resolve(this.connection);
        }
        //use pool
        if (this.pool) {
            let fn = lib.promisify(this.pool.getConnection, this.pool);
            return fn().then(conn => {
                this.connection = conn;
                return this.connection;
            }).catch(err => {
                // if (err.code === 'PROTOCOL_CONNECTION_LOST') {
                //     return this.connect();
                // } else {
                //     this.close();
                //     return Promise.reject(err);
                // }
                if (connnum < 3) {
                    connnum ++;
                    return this.connect(connnum);
                } else {
                    this.close();
                    return Promise.reject(err);
                }
            });
        }
        let config = this.config;
        if (config.connectionLimit) {
            this.pool = mysql.createPool(config);
            return this.connect();
        }

        let connectKey = `mysql://${config.user}:${config.password}@${config.host}:${config.port}/${config.database}`;
        if (config.db_ext_config.forceNewNum) {
            connectKey = `${connectKey}_${config.db_ext_config.forceNewNum}`;
        }

        if (!__thinkorm.await) {
            __thinkorm.await = new awaitjs();
        }
        return __thinkorm.await.run(connectKey, () => {
            let deferred = lib.getDefer();
            let connection = mysql.createConnection(config);
            connection.connect(err => {
                if (err) {
                    // this.close();
                    // deferred.reject(err);
                    if (connnum < 3) {
                        connnum ++;
                        deferred.resolve(this.connect(connnum));
                    } else {
                        this.close();
                        deferred.reject(err);
                    }
                } else {
                    deferred.resolve(connection);
                }
            });
            connection.on('error', err => {
                // if (err.code === 'PROTOCOL_CONNECTION_LOST') {
                //     deferred.resolve(this.connect());
                // } else {
                //     this.close();
                //     deferred.reject(err);
                // }
                if (connnum < 3) {
                    connnum ++;
                    deferred.resolve(this.connect(connnum));
                } else {
                    this.close();
                    deferred.reject('DB connection error');
                }
            });
            connection.on('end', () => {
                // this.close();
                // deferred.reject('DB connection end');
                if (connnum < 3) {
                    connnum ++;
                    deferred.resolve(this.connect(connnum));
                } else {
                    this.close();
                    deferred.reject('DB connection end');
                }
            });
            this.connection = connection;
            return deferred.promise;
        });
    }

    /**
     * 
     * 
     */
    close() {
        if (this.pool) {
            this.pool.end();
            this.pool = null;
        } else {
            if (this.connection) {
                this.connection.end();
                this.connection = null;
            }
        }
    }
};